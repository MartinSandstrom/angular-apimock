/*! Angular API Mock v0.1.0
 * Licensed with MIT
 * Made with â™¥ from Seriema + Redhorn */
angular.module("apiMock",[]).config(["$httpProvider",function(a){a.interceptors.push("httpInterceptor")}]).provider("apiMock",function(){function a(a){switch(typeof a){case"undefined":return void 0;case"number":return isNaN(a)||0===a?!1:a;default:return!!a}}function b(a,b){c=a,d=b}var c,d,e="/mock_data",f="/api",g=b.prototype;g.shouldMock=function(a){var b=this._isLocalMock(a);return void 0===b&&(b=!!this._isGlobalMock()),b&&this._isApiPath(a)},g.doMock=function(a){if("number"==typeof a.apiMock){var b={status:a.apiMock,headers:{"Content-Type":"text/html; charset=utf-8",Server:"Angular ApiMock"}};return d.reject(b)}var c=a.url.substring(h.apiPath.length);a.url=h.mockDataPath+c;var e=/[a-zA-z0-9/.\-]*/;return a.url=e.exec(a.url)[0],"/"===a.url[a.url.length-1]&&(a.url=a.url.slice(0,-1)),a.url+="."+a.method.toLowerCase()+".json",a},g._isApiPath=function(a){return 0===a.url.indexOf(h.apiPath)},g._isLocalMock=function(b){return a(b.apiMock)},g._isGlobalMock=function(){var b,d=/apimock/i;return angular.forEach(c.search(),function(c,e){d.test(e)&&(b=a(c))}),b};var h={mockDataPath:e,apiPath:f};this.config=function(a){angular.extend(h,a)},this.$get=["$location","$q",function(a,c){return new b(a,c)}]}).service("httpInterceptor",["$q","apiMock",function(a,b){this.request=function(c){return c&&b.shouldMock(c)&&(c=b.doMock(c)),c||a.when(c)}}]);